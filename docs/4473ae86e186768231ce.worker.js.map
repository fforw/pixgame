{"version":3,"sources":["webpack://Game/webpack/bootstrap","webpack://Game/./node_modules/performance-now/lib/performance-now.js","webpack://Game/./node_modules/simplex-noise/simplex-noise.js","webpack://Game/./node_modules/process/browser.js","webpack://Game/./node_modules/prando/dist/Prando.es.js","webpack://Game/./src/flood.js","webpack://Game/./src/util/marchingSquares.js","webpack://Game/./src/util/simplify.js","webpack://Game/./src/Delaunay.js","webpack://Game/./src/WorldMap.js","webpack://Game/./src/workers/map.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","process","getNanoSeconds","hrtime","loadTime","moduleLoadTime","nodeLoadTime","upTime","performance","now","hr","uptime","Date","getTime","this","__WEBPACK_AMD_DEFINE_RESULT__","F2","Math","sqrt","G2","G3","F4","G4","SimplexNoise","randomOrSeed","random","s0","s1","s2","mash","data","toString","length","h","charCodeAt","arguments","alea","buildPermutationTable","perm","Uint8Array","permMod12","aux","grad3","Float32Array","grad4","noise2D","xin","yin","i1","j1","n0","n1","n2","floor","j","x0","y0","x1","y1","x2","y2","ii","jj","t0","gi0","t1","gi1","t2","gi2","noise3D","zin","n3","k1","i2","j2","k2","k","z0","z1","z2","x3","y3","z3","kk","t3","gi3","noise4D","x","y","z","w","n4","l1","l2","i3","j3","k3","l3","w0","rankx","ranky","rankz","rankw","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","_buildPermutationTable","undefined","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","Array","push","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","Prando_es","Prando","seed","_value","NaN","_seed","hashCode","getSafeSeed","MIN","MAX","reset","next","min","pseudoMax","recalculate","map","nextInt","max","nextString","chars","str","nextChar","substr","nextArrayItem","nextBoolean","skip","iterations","xorshift","val","minFrom","maxFrom","minTo","maxTo","hash","flood","width","size","tiles","things","_RIVER","WATER","RIVER","createPolygon","id","cells","startX","startY","ctx","cellCase","points","fromLeft","fromAbove","height","condition","outside","line","JSON","stringify","perpendicularDistance","px","py","lineStartX","lineStartY","lineEndX","lineEndY","dx","dy","mag","pvx","pvy","pvDot","ax","ay","simplify","epsilon","repeatFirst","out","simplifyRec","start","end","dMax","index","endX","endY","slice","EPSILON","circumcircle","vertices","xc","yc","m1","m2","mx1","mx2","my1","my2","fabsy1y2","abs","fabsy2y3","dedup","edges","a","b","splice","Delaunay","triangulate","indices","superTri","open","closed","sort","diff","dmax","xmid","ymid","xmin","Number","POSITIVE_INFINITY","ymin","xmax","NEGATIVE_INFINITY","ymax","supertriangle","contains","offsetA","offsetB","offsetC","uvOut","isNull","u","v","TAU","PI","N2","N3","N4","RELATIVE_CITY_RADIUS","MIN_CITY_RATING","clamp","WATER_LINE","BEACH_LINE","WOODS_LINE","MOUNTAIN_LINE","SAND","GRASS","DIRT","ROCK","WOODS","WOODS2","ICE","ICE2","DOT","BLOCKED","LARGE_TREE","LARGE_TREE_2","BOULDER","BOULDER_3","calcWeightSum","sum","tileVillageRating","spawnTable","table","sTile","normalizeSpawnTable","_defineProperty","_normalizeSpawnTable","spawnForBlock","mapOffset","tile","sizeMask","spawns","thing","pos","spawn","prev2Offset","prevOffset","nextOffset","next2Offset","next3Offset","nCoords","determineTile","climate","result","coords","heightCoords","heightFn","nx","ny","nz","nw","createBase","updateProgress","percent","WorldMap","report","climateStep","ca","sin","directions","climbUp","probe","currentHigh","currentX","currentY","improved","createSprings","probes","probeCount","randomProbes","walkingStart","firstWalker","filtered","amount","multis","xOff","yOff","_objectSpread","jitter","uniqueProbes","unique","other","removeDuplicates","flow","currentLow","Infinity","currentTile","currentDirection","read","_map$heightCoords","drawRivers","springs","flowingStart","firstFlower","planCities","rivers","longRivers","mean","mid","findMean","filter","findLongRivers","spring","idx","radius","mouthX","mouthY","_findNonRiverTile","minDistance","distance","currX","currY","findNonRiverTile","radiusSquared","xDelta","centerX","centerY","_longRivers$j","round","putThing","SIMPLIFICATION_EPSILON","planRoads","cities","polygons","polygon","console","log","marchingSquares","reduce","count","simplified","arrayOfArrays","flatten","triangles","walkable","filterWalkable","_this","_classCallCheck","noise","fineMask","factor","obj","afterBase","afterRivers","afterCities","cos","imageData","createImageData","tileOffset","dataOffset","_","onmessage","ev","_ev$data","type","ticket","generate","postMessage","payload","serialize"],"mappings":"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","file":"4473ae86e186768231ce.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","// Generated by CoffeeScript 1.12.2\n(function() {\n  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n  if ((typeof performance !== \"undefined\" && performance !== null) && performance.now) {\n    module.exports = function() {\n      return performance.now();\n    };\n  } else if ((typeof process !== \"undefined\" && process !== null) && process.hrtime) {\n    module.exports = function() {\n      return (getNanoSeconds() - nodeLoadTime) / 1e6;\n    };\n    hrtime = process.hrtime;\n    getNanoSeconds = function() {\n      var hr;\n      hr = hrtime();\n      return hr[0] * 1e9 + hr[1];\n    };\n    moduleLoadTime = getNanoSeconds();\n    upTime = process.uptime() * 1e9;\n    nodeLoadTime = moduleLoadTime - upTime;\n  } else if (Date.now) {\n    module.exports = function() {\n      return Date.now() - loadTime;\n    };\n    loadTime = Date.now();\n  } else {\n    module.exports = function() {\n      return new Date().getTime() - loadTime;\n    };\n    loadTime = new Date().getTime();\n  }\n\n}).call(this);\n\n//# sourceMappingURL=performance-now.js.map\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","var Prando = /** @class */ (function () {\n    // ================================================================================================================\n    // CONSTRUCTOR ----------------------------------------------------------------------------------------------------\n    /**\n     * Generate a new Prando pseudo-random number generator.\n     *\n     * @param seed - A number or string seed that determines which pseudo-random number sequence will be created. Defaults to current time.\n     */\n    function Prando(seed) {\n        this._value = NaN;\n        if (typeof (seed) === \"string\") {\n            // String seed\n            this._seed = this.hashCode(seed);\n        }\n        else if (typeof (seed) === \"number\") {\n            // Numeric seed\n            this._seed = this.getSafeSeed(seed);\n        }\n        else {\n            // Pseudo-random seed\n            this._seed = this.getSafeSeed(Prando.MIN + Math.floor((Prando.MAX - Prando.MIN) * Math.random()));\n        }\n        this.reset();\n    }\n    // ================================================================================================================\n    // PUBLIC INTERFACE -----------------------------------------------------------------------------------------------\n    /**\n     * Generates a pseudo-random number between a lower (inclusive) and a higher (exclusive) bounds.\n     *\n     * @param min - The minimum number that can be randomly generated.\n     * @param pseudoMax - The maximum number that can be randomly generated (exclusive).\n     * @return The generated pseudo-random number.\n     */\n    Prando.prototype.next = function (min, pseudoMax) {\n        if (min === void 0) { min = 0; }\n        if (pseudoMax === void 0) { pseudoMax = 1; }\n        this.recalculate();\n        return this.map(this._value, Prando.MIN, Prando.MAX, min, pseudoMax);\n    };\n    /**\n     * Generates a pseudo-random integer number in a range (inclusive).\n     *\n     * @param min - The minimum number that can be randomly generated.\n     * @param max - The maximum number that can be randomly generated.\n     * @return The generated pseudo-random number.\n     */\n    Prando.prototype.nextInt = function (min, max) {\n        if (min === void 0) { min = 10; }\n        if (max === void 0) { max = 100; }\n        this.recalculate();\n        return Math.floor(this.map(this._value, Prando.MIN, Prando.MAX, min, max + 1));\n    };\n    /**\n     * Generates a pseudo-random string sequence of a particular length from a specific character range.\n     *\n     * Note: keep in mind that creating a random string sequence does not guarantee uniqueness; there is always a\n     * 1 in (char_length^string_length) chance of collision. For real unique string ids, always check for\n     * pre-existing ids, or employ a robust GUID/UUID generator.\n     *\n     * @param length - Length of the strting to be generated.\n     * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).\n     * @return The generated string sequence.\n     */\n    Prando.prototype.nextString = function (length, chars) {\n        if (length === void 0) { length = 16; }\n        if (chars === void 0) { chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"; }\n        var str = \"\";\n        while (str.length < length) {\n            str += this.nextChar(chars);\n        }\n        return str;\n    };\n    /**\n     * Generates a pseudo-random string of 1 character specific character range.\n     *\n     * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).\n     * @return The generated character.\n     */\n    Prando.prototype.nextChar = function (chars) {\n        if (chars === void 0) { chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"; }\n        this.recalculate();\n        return chars.substr(this.nextInt(0, chars.length - 1), 1);\n    };\n    /**\n     * Picks a pseudo-random item from an array. The array is left unmodified.\n     *\n     * Note: keep in mind that while the returned item will be random enough, picking one item from the array at a time\n     * does not guarantee nor imply that a sequence of random non-repeating items will be picked. If you want to\n     * *pick items in a random order* from an array, instead of *pick one random item from an array*, it's best to\n     * apply a *shuffle* transformation to the array instead, then read it linearly.\n     *\n     * @param array - Array of any type containing one or more candidates for random picking.\n     * @return An item from the array.\n     */\n    Prando.prototype.nextArrayItem = function (array) {\n        this.recalculate();\n        return array[this.nextInt(0, array.length - 1)];\n    };\n    /**\n     * Generates a pseudo-random boolean.\n     *\n     * @return A value of true or false.\n     */\n    Prando.prototype.nextBoolean = function () {\n        this.recalculate();\n        return this._value > 0.5;\n    };\n    /**\n     * Skips ahead in the sequence of numbers that are being generated. This is equivalent to\n     * calling next() a specified number of times, but faster since it doesn't need to map the\n     * new random numbers to a range and return it.\n     *\n     * @param iterations - The number of items to skip ahead.\n     */\n    Prando.prototype.skip = function (iterations) {\n        if (iterations === void 0) { iterations = 1; }\n        while (iterations-- > 0) {\n            this.recalculate();\n        }\n    };\n    /**\n     * Reset the pseudo-random number sequence back to its starting seed. Further calls to next()\n     * will then produce the same sequence of numbers it had produced before. This is equivalent to\n     * creating a new Prando instance with the same seed as another Prando instance.\n     *\n     * Example:\n     * let rng = new Prando(12345678);\n     * console.log(rng.next()); // 0.6177754114889017\n     * console.log(rng.next()); // 0.5784605181725837\n     * rng.reset();\n     * console.log(rng.next()); // 0.6177754114889017 again\n     * console.log(rng.next()); // 0.5784605181725837 again\n     */\n    Prando.prototype.reset = function () {\n        this._value = this._seed;\n    };\n    // ================================================================================================================\n    // PRIVATE INTERFACE ----------------------------------------------------------------------------------------------\n    Prando.prototype.recalculate = function () {\n        this._value = this.xorshift(this._value);\n    };\n    Prando.prototype.xorshift = function (value) {\n        // Xorshift*32\n        // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\n        value ^= value << 13;\n        value ^= value >> 17;\n        value ^= value << 5;\n        return value;\n    };\n    Prando.prototype.map = function (val, minFrom, maxFrom, minTo, maxTo) {\n        return ((val - minFrom) / (maxFrom - minFrom)) * (maxTo - minTo) + minTo;\n    };\n    Prando.prototype.hashCode = function (str) {\n        var hash = 0;\n        if (str) {\n            var l = str.length;\n            for (var i = 0; i < l; i++) {\n                hash = ((hash << 5) - hash) + str.charCodeAt(i);\n                hash |= 0;\n                hash = this.xorshift(hash);\n            }\n        }\n        return this.getSafeSeed(hash);\n    };\n    Prando.prototype.getSafeSeed = function (seed) {\n        if (seed === 0)\n            return 1;\n        return seed;\n    };\n    Prando.MIN = -2147483648; // Int32 min\n    Prando.MAX = 2147483647; // Int32 max\n    return Prando;\n}());\n\nexport default Prando;\n","import { RIVER, _RIVER, WATER } from \"./WorldMap\";\n\nexport default function flood(map, x, y, width)\n{\n    const { size, tiles, things} = map;\n\n    let off;\n    //console.log(\"FLOOD\", width)\n\n    switch(width)\n    {\n        case 0:\n        case 1:\n            things[( y - 1) * size + x - 1] = _RIVER;\n            things[( y - 1) * size + x] = _RIVER;\n            things[( y - 1) * size +  x + 1] = _RIVER;\n            things[y * size + x - 1] = _RIVER;\n            off = y * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[y * size +  x + 1] = _RIVER;\n            things[( y + 1) * size + x - 1] = _RIVER;\n            things[( y + 1) * size + x] = _RIVER;\n            things[( y + 1) * size +  x + 1] = _RIVER;\n            break;\n        case 2:\n            things[( y - 1) * size + x - 1] = _RIVER;\n            things[( y - 1) * size + x] = _RIVER;\n            things[( y - 1) * size +  x + 1] = _RIVER;\n            things[( y - 1) * size +  x + 2] = _RIVER;\n            things[y * size + x - 1] = _RIVER;\n            off = y * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[y * size +  x + 2] = _RIVER;\n            things[( y + 1) * size + x - 1] = _RIVER;\n            things[( y + 1) * size + x] = _RIVER;\n            things[( y + 1) * size +  x + 1] = _RIVER;\n            things[( y + 1) * size +  x + 2] = _RIVER;\n            break;\n        case 3:\n            things[( y - 3) * size + x] = _RIVER;\n            things[( y - 3) * size +  x + 1] = _RIVER;\n            things[( y - 2) * size + x - 1] = _RIVER;\n            things[( y - 2) * size + x] = _RIVER;\n            things[( y - 2) * size +  x + 1] = _RIVER;\n            things[( y - 2) * size +  x + 2] = _RIVER;\n            things[( y - 1) * size + x - 2] = _RIVER;\n            things[( y - 1) * size + x - 1] = _RIVER;\n            off = ( y - 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 1) * size +  x + 2] = _RIVER;\n            things[( y - 1) * size +  x + 3] = _RIVER;\n            things[y * size + x - 2] = _RIVER;\n            things[y * size + x - 1] = _RIVER;\n            off = y * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[y * size +  x + 2] = _RIVER;\n            things[y * size +  x + 3] = _RIVER;\n            things[( y + 1) * size + x - 1] = _RIVER;\n            things[( y + 1) * size + x] = _RIVER;\n            things[( y + 1) * size +  x + 1] = _RIVER;\n            things[( y + 1) * size +  x + 2] = _RIVER;\n            things[( y + 2) * size + x] = _RIVER;\n            things[( y + 2) * size +  x + 1] = _RIVER;\n            break;\n        case 4:\n            things[( y - 3) * size + x - 1] = _RIVER;\n            things[( y - 3) * size + x] = _RIVER;\n            things[( y - 3) * size +  x + 1] = _RIVER;\n            things[( y - 2) * size + x - 2] = _RIVER;\n            things[( y - 2) * size + x - 1] = _RIVER;\n            things[( y - 2) * size + x] = _RIVER;\n            things[( y - 2) * size +  x + 1] = _RIVER;\n            things[( y - 2) * size +  x + 2] = _RIVER;\n            things[( y - 1) * size + x - 3] = _RIVER;\n            things[( y - 1) * size + x - 2] = _RIVER;\n            off = ( y - 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 1) * size +  x + 2] = _RIVER;\n            things[( y - 1) * size +  x + 3] = _RIVER;\n            things[y * size + x - 3] = _RIVER;\n            things[y * size + x - 2] = _RIVER;\n            off = y * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[y * size +  x + 2] = _RIVER;\n            things[y * size +  x + 3] = _RIVER;\n            things[( y + 1) * size + x - 2] = _RIVER;\n            things[( y + 1) * size + x - 1] = _RIVER;\n            things[( y + 1) * size + x] = _RIVER;\n            things[( y + 1) * size +  x + 1] = _RIVER;\n            things[( y + 1) * size +  x + 2] = _RIVER;\n            things[( y + 2) * size + x - 1] = _RIVER;\n            things[( y + 2) * size + x] = _RIVER;\n            things[( y + 2) * size +  x + 1] = _RIVER;\n            break;\n        case 5:\n            things[( y - 3) * size + x - 1] = _RIVER;\n            things[( y - 3) * size + x] = _RIVER;\n            things[( y - 3) * size +  x + 1] = _RIVER;\n            things[( y - 2) * size + x - 2] = _RIVER;\n            things[( y - 2) * size + x - 1] = _RIVER;\n            things[( y - 2) * size + x] = _RIVER;\n            things[( y - 2) * size +  x + 1] = _RIVER;\n            things[( y - 2) * size +  x + 2] = _RIVER;\n            things[( y - 1) * size + x - 3] = _RIVER;\n            things[( y - 1) * size + x - 2] = _RIVER;\n            off = ( y - 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 1) * size +  x + 2] = _RIVER;\n            things[( y - 1) * size +  x + 3] = _RIVER;\n            things[y * size + x - 3] = _RIVER;\n            things[y * size + x - 2] = _RIVER;\n            off = y * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[y * size +  x + 2] = _RIVER;\n            things[y * size +  x + 3] = _RIVER;\n            things[( y + 1) * size + x - 3] = _RIVER;\n            things[( y + 1) * size + x - 2] = _RIVER;\n            off = ( y + 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 1) * size +  x + 2] = _RIVER;\n            things[( y + 1) * size +  x + 3] = _RIVER;\n            things[( y + 2) * size + x - 2] = _RIVER;\n            things[( y + 2) * size + x - 1] = _RIVER;\n            things[( y + 2) * size + x] = _RIVER;\n            things[( y + 2) * size +  x + 1] = _RIVER;\n            things[( y + 2) * size +  x + 2] = _RIVER;\n            things[( y + 3) * size + x - 1] = _RIVER;\n            things[( y + 3) * size + x] = _RIVER;\n            things[( y + 3) * size +  x + 1] = _RIVER;\n            break;\n        case 6:\n            things[( y - 4) * size + x - 1] = _RIVER;\n            things[( y - 4) * size + x] = _RIVER;\n            things[( y - 4) * size +  x + 1] = _RIVER;\n            things[( y - 3) * size + x - 2] = _RIVER;\n            things[( y - 3) * size + x - 1] = _RIVER;\n            things[( y - 3) * size + x] = _RIVER;\n            things[( y - 3) * size +  x + 1] = _RIVER;\n            things[( y - 3) * size +  x + 2] = _RIVER;\n            things[( y - 2) * size + x - 3] = _RIVER;\n            things[( y - 2) * size + x - 2] = _RIVER;\n            off = ( y - 2) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 2) * size +  x + 2] = _RIVER;\n            things[( y - 2) * size +  x + 3] = _RIVER;\n            things[( y - 1) * size + x - 4] = _RIVER;\n            things[( y - 1) * size + x - 3] = _RIVER;\n            off = ( y - 1) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 1) * size +  x + 3] = _RIVER;\n            things[( y - 1) * size +  x + 4] = _RIVER;\n            things[y * size + x - 4] = _RIVER;\n            things[y * size + x - 3] = _RIVER;\n            off = y * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[y * size +  x + 3] = _RIVER;\n            things[y * size +  x + 4] = _RIVER;\n            things[( y + 1) * size + x - 4] = _RIVER;\n            things[( y + 1) * size + x - 3] = _RIVER;\n            off = ( y + 1) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 1) * size +  x + 3] = _RIVER;\n            things[( y + 1) * size +  x + 4] = _RIVER;\n            things[( y + 2) * size + x - 3] = _RIVER;\n            things[( y + 2) * size + x - 2] = _RIVER;\n            off = ( y + 2) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 2) * size +  x + 2] = _RIVER;\n            things[( y + 2) * size +  x + 3] = _RIVER;\n            things[( y + 3) * size + x - 2] = _RIVER;\n            things[( y + 3) * size + x - 1] = _RIVER;\n            things[( y + 3) * size + x] = _RIVER;\n            things[( y + 3) * size +  x + 1] = _RIVER;\n            things[( y + 3) * size +  x + 2] = _RIVER;\n            things[( y + 4) * size + x - 1] = _RIVER;\n            things[( y + 4) * size + x] = _RIVER;\n            things[( y + 4) * size +  x + 1] = _RIVER;\n            break;\n        case 7:\n            things[( y - 5) * size + x - 1] = _RIVER;\n            things[( y - 5) * size + x] = _RIVER;\n            things[( y - 5) * size +  x + 1] = _RIVER;\n            things[( y - 4) * size + x - 2] = _RIVER;\n            things[( y - 4) * size + x - 1] = _RIVER;\n            things[( y - 4) * size + x] = _RIVER;\n            things[( y - 4) * size +  x + 1] = _RIVER;\n            things[( y - 4) * size +  x + 2] = _RIVER;\n            things[( y - 3) * size + x - 3] = _RIVER;\n            things[( y - 3) * size + x - 2] = _RIVER;\n            off = ( y - 3) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 3) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 3) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 3) * size +  x + 2] = _RIVER;\n            things[( y - 3) * size +  x + 3] = _RIVER;\n            things[( y - 2) * size + x - 4] = _RIVER;\n            things[( y - 2) * size + x - 3] = _RIVER;\n            off = ( y - 2) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 2) * size +  x + 3] = _RIVER;\n            things[( y - 2) * size +  x + 4] = _RIVER;\n            things[( y - 1) * size + x - 5] = _RIVER;\n            things[( y - 1) * size + x - 4] = _RIVER;\n            off = ( y - 1) * size + x - 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 1) * size +  x + 4] = _RIVER;\n            things[( y - 1) * size +  x + 5] = _RIVER;\n            things[y * size + x - 5] = _RIVER;\n            things[y * size + x - 4] = _RIVER;\n            off = y * size + x - 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[y * size +  x + 4] = _RIVER;\n            things[y * size +  x + 5] = _RIVER;\n            things[( y + 1) * size + x - 5] = _RIVER;\n            things[( y + 1) * size + x - 4] = _RIVER;\n            off = ( y + 1) * size + x - 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 1) * size +  x + 4] = _RIVER;\n            things[( y + 1) * size +  x + 5] = _RIVER;\n            things[( y + 2) * size + x - 4] = _RIVER;\n            things[( y + 2) * size + x - 3] = _RIVER;\n            off = ( y + 2) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 2) * size +  x + 3] = _RIVER;\n            things[( y + 2) * size +  x + 4] = _RIVER;\n            things[( y + 3) * size + x - 3] = _RIVER;\n            things[( y + 3) * size + x - 2] = _RIVER;\n            off = ( y + 3) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 3) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 3) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 3) * size +  x + 2] = _RIVER;\n            things[( y + 3) * size +  x + 3] = _RIVER;\n            things[( y + 4) * size + x - 2] = _RIVER;\n            things[( y + 4) * size + x - 1] = _RIVER;\n            things[( y + 4) * size + x] = _RIVER;\n            things[( y + 4) * size +  x + 1] = _RIVER;\n            things[( y + 4) * size +  x + 2] = _RIVER;\n            things[( y + 5) * size + x - 1] = _RIVER;\n            things[( y + 5) * size + x] = _RIVER;\n            things[( y + 5) * size +  x + 1] = _RIVER;\n            break;\n        case 8:\n            things[( y - 6) * size + x - 1] = _RIVER;\n            things[( y - 6) * size + x] = _RIVER;\n            things[( y - 6) * size +  x + 1] = _RIVER;\n            things[( y - 5) * size + x - 3] = _RIVER;\n            things[( y - 5) * size + x - 2] = _RIVER;\n            things[( y - 5) * size + x - 1] = _RIVER;\n            things[( y - 5) * size + x] = _RIVER;\n            things[( y - 5) * size +  x + 1] = _RIVER;\n            things[( y - 5) * size +  x + 2] = _RIVER;\n            things[( y - 5) * size +  x + 3] = _RIVER;\n            things[( y - 4) * size + x - 4] = _RIVER;\n            things[( y - 4) * size + x - 3] = _RIVER;\n            things[( y - 4) * size + x - 2] = _RIVER;\n            off = ( y - 4) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 4) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 4) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 4) * size +  x + 2] = _RIVER;\n            things[( y - 4) * size +  x + 3] = _RIVER;\n            things[( y - 4) * size +  x + 4] = _RIVER;\n            things[( y - 3) * size + x - 5] = _RIVER;\n            things[( y - 3) * size + x - 4] = _RIVER;\n            things[( y - 3) * size + x - 3] = _RIVER;\n            off = ( y - 3) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 3) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 3) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 3) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 3) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 3) * size +  x + 3] = _RIVER;\n            things[( y - 3) * size +  x + 4] = _RIVER;\n            things[( y - 3) * size +  x + 5] = _RIVER;\n            things[( y - 2) * size + x - 5] = _RIVER;\n            things[( y - 2) * size + x - 4] = _RIVER;\n            off = ( y - 2) * size + x - 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 2) * size +  x + 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 2) * size +  x + 4] = _RIVER;\n            things[( y - 2) * size +  x + 5] = _RIVER;\n            things[( y - 1) * size + x - 6] = _RIVER;\n            things[( y - 1) * size + x - 5] = _RIVER;\n            off = ( y - 1) * size + x - 4; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x - 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y - 1) * size +  x + 4; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y - 1) * size +  x + 5] = _RIVER;\n            things[( y - 1) * size +  x + 6] = _RIVER;\n            things[y * size + x - 6] = _RIVER;\n            things[y * size + x - 5] = _RIVER;\n            off = y * size + x - 4; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x - 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = y * size +  x + 4; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[y * size +  x + 5] = _RIVER;\n            things[y * size +  x + 6] = _RIVER;\n            things[( y + 1) * size + x - 6] = _RIVER;\n            things[( y + 1) * size + x - 5] = _RIVER;\n            off = ( y + 1) * size + x - 4; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x - 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 1) * size +  x + 4; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 1) * size +  x + 5] = _RIVER;\n            things[( y + 1) * size +  x + 6] = _RIVER;\n            things[( y + 2) * size + x - 5] = _RIVER;\n            things[( y + 2) * size + x - 4] = _RIVER;\n            off = ( y + 2) * size + x - 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 2) * size +  x + 3; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 2) * size +  x + 4] = _RIVER;\n            things[( y + 2) * size +  x + 5] = _RIVER;\n            things[( y + 3) * size + x - 5] = _RIVER;\n            things[( y + 3) * size + x - 4] = _RIVER;\n            things[( y + 3) * size + x - 3] = _RIVER;\n            off = ( y + 3) * size + x - 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 3) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 3) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 3) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 3) * size +  x + 2; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 3) * size +  x + 3] = _RIVER;\n            things[( y + 3) * size +  x + 4] = _RIVER;\n            things[( y + 3) * size +  x + 5] = _RIVER;\n            things[( y + 4) * size + x - 4] = _RIVER;\n            things[( y + 4) * size + x - 3] = _RIVER;\n            things[( y + 4) * size + x - 2] = _RIVER;\n            off = ( y + 4) * size + x - 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 4) * size + x; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            off = ( y + 4) * size +  x + 1; if (tiles[off] !== WATER) {  tiles[off] = RIVER; things[off] = _RIVER; }\n            things[( y + 4) * size +  x + 2] = _RIVER;\n            things[( y + 4) * size +  x + 3] = _RIVER;\n            things[( y + 4) * size +  x + 4] = _RIVER;\n            things[( y + 5) * size + x - 3] = _RIVER;\n            things[( y + 5) * size + x - 2] = _RIVER;\n            things[( y + 5) * size + x - 1] = _RIVER;\n            things[( y + 5) * size + x] = _RIVER;\n            things[( y + 5) * size +  x + 1] = _RIVER;\n            things[( y + 5) * size +  x + 2] = _RIVER;\n            things[( y + 5) * size +  x + 3] = _RIVER;\n            things[( y + 6) * size + x - 1] = _RIVER;\n            things[( y + 6) * size + x] = _RIVER;\n            things[( y + 6) * size +  x + 1] = _RIVER;\n            break;\n\n        default:\n            throw new Error(\"Unhandled width: \" + width)\n\n    }\n}\n","import now from \"performance-now\"\n\nfunction createPolygon(id, data, cells, x, y, startX, startY, ctx)\n{\n    let fromLeft = true;\n    let fromAbove = false;\n\n    const { width, height, condition, outside } = ctx;\n\n    let line = y * width;\n    if (cells[line + x] !== 0)\n    {\n        // cell already visited\n        return null;\n    }\n\n    let x0, x2, y0, y2, cellCase;\n\n    y0 = y - 1;\n    y2 = y + 1;\n    x0 = x - 1;\n    x2 = x + 1;\n\n    cellCase = 0;\n\n    if (x > 0)\n    {\n        if (y > 0)\n        {\n            cellCase |= (condition(data[line + x]) << 3);\n        }\n        else\n        {\n            cellCase |= (outside << 3);\n        }\n\n        if (y2 < height)\n        {\n            cellCase |= (condition(data[line + width + x]) << 0);\n        }\n        else\n        {\n            cellCase |= (outside << 0);\n        }\n    }\n    else\n    {\n        cellCase |= (outside << 3);\n        cellCase |= (outside << 0);\n    }\n\n    if (x2 < width)\n    {\n        if (y > 0)\n        {\n            cellCase |= (condition(data[line + x2]) << 2);\n        }\n        else\n        {\n            cellCase |= (outside << 2);\n        }\n        if (y2 < height)\n        {\n            cellCase |= (condition(data[line + width + x2]) << 1);\n        }\n        else\n        {\n            cellCase |= (outside << 1);\n        }\n    }\n    else\n    {\n        cellCase |= (outside << 2);\n        cellCase |= (outside << 1);\n    }\n\n    // empty cells and cells within an obstacle don't start polygons\n    if (cellCase === 0 || cellCase === 15)\n    {\n        return null;\n    }\n\n    //console.log(\"start polygon\", x, y);\n\n\n    let points;\n\n    // // if we\n    // if (points != null && x === startX && y === startY)\n    // {\n    //\n    // }\n\n    switch(cellCase)\n    {\n        case 1:\n            points = [\n                x, y + 0.5\n            ];\n            break;\n\n        case 2:\n            points = [\n                x + 0.5, y2\n            ];\n            break;\n        case 3:\n            points = [\n                x, y + 0.5\n            ];\n            break;\n        case 4:\n            points = [\n                x2, y + 0.5,\n            ];\n            break;\n        case 5:\n            if (fromLeft)\n            {\n                points = [\n                    x, y + 0.5\n                ];\n            }\n            else\n            {\n                points = [\n                    x2, y + 0.5,\n                ];\n            }\n            break;\n        case 6:\n            points = [\n                x+0.5, y2\n            ];\n            break;\n\n        case 7:\n            points = [\n                x, y + 0.5\n            ];\n            break;\n        case 8:\n            points = [\n                x+0.5, y\n            ];\n            break;\n\n        case 9:\n            points = [\n                x+0.5, y\n            ];\n            break;\n\n        case 10:\n            if (fromAbove)\n            {\n                points = [\n                    x + 0.5, y\n                ];\n            }\n            else\n            {\n                points = [\n                    x + 0.5, y2\n                ];\n            }\n            break;\n        case 11:\n            points = [\n                x+0.5, y\n            ];\n            break;\n        case 12:\n            points = [\n                x2, y + 0.5\n            ];\n            break;\n        case 13:\n            points = [\n                x2, y + 0.5\n            ];\n            break;\n        case 14:\n            points = [\n                x + 0.5, y2\n            ];\n            break;\n\n        default:\n            throw new Error(\"Invalid cell value\");\n    }\n\n    do\n    {\n\n        // if (cells[line + x] !== 0)\n        // {\n        //     if (cellCase === 10 ||cellCase === 5)\n        //     {\n        //         console.log(\"double visit on ambiguous\")\n        //     }\n        //     else\n        //     {\n        //         throw new Error(\"Illegal State at length = \" + points.length + \", id = \" + cells[line + x] + \": \" + JSON.stringify({\n        //             x,\n        //             y,\n        //             startX,\n        //             startY,\n        //             cellCase\n        //         }));\n        //     }\n        // }\n\n        cells[line + x] = id;\n\n        //console.log(x, y, \"case = \", cellCase, \"check = \", x, y, \" <-> \", x2, y2);\n        switch (cellCase)\n        {\n            case 1:\n                points.push(\n                    x + 0.5, y2\n                );\n                y = y2;\n                fromLeft = false;\n                fromAbove = true;\n                break;\n            case 2:\n                points.push(\n                    x2, y + 0.5\n                );\n                x = x2;\n                fromLeft = true;\n                fromAbove = false;\n                break;\n            case 3:\n                points.push(\n                    x2, y + 0.5\n                );\n                x = x2;\n                fromLeft = true;\n                fromAbove = false;\n                break;\n            case 4:\n                points.push(\n                    x + 0.5, y\n                );\n                y = y0;\n                fromLeft = false;\n                fromAbove = false;\n                break;\n            case 5:\n                if (fromLeft)\n                {\n                    points.push(\n                        x + 0.5, y\n                    );\n                    y = y0;\n                    fromAbove = false;\n                }\n                else\n                {\n                    points.push(\n                        x + 0.5, y2\n                    );\n                    y = y2;\n                    fromAbove = true;\n                }\n                fromLeft = false;\n                break;\n            case 6:\n                points.push(\n                    x + 0.5, y\n                );\n                y = y0;\n                fromLeft = false;\n                fromAbove = false;\n                break;\n            case 7:\n                points.push(\n                    x + 0.5, y\n                );\n                y = y0;\n                fromLeft = false;\n                fromAbove = false;\n                break;\n            case 8:\n                points.push(\n                    x, y + 0.5\n                );\n                x = x0;\n                fromLeft = false;\n                fromAbove = false;\n                break;\n            case 9:\n                points.push(\n                    x + 0.5, y2\n                );\n                y = y2;\n                fromLeft = false;\n                fromAbove = true;\n                break;\n            case 10:\n                if (fromAbove)\n                {\n                    points.push(\n                        x2, y + 0.5\n                    );\n                    x = x2;\n                    fromLeft = true;\n                }\n                else\n                {\n                    points.push(\n                        x, y + 0.5\n                    );\n                    x = x0;\n                    fromLeft = false;\n                }\n                fromAbove = false;\n                break;\n            case 11:\n                points.push(\n                    x2, y + 0.5\n                );\n                x = x2;\n                fromLeft = true;\n                fromAbove = false;\n                break;\n            case 12:\n                points.push(\n                    x, y + 0.5\n                );\n                x = x0;\n                fromLeft = false;\n                fromAbove = false;\n                break;\n            case 13:\n                points.push(\n                    x + 0.5, y2\n                );\n                y = y2;\n                fromLeft = false;\n                fromAbove = true;\n                break;\n            case 14:\n                points.push(\n                    x, y + 0.5\n                );\n                x = x0;\n                fromLeft = false;\n                fromAbove = false;\n                break;\n            default:\n                throw new Error(\"Unhandled cell value: \" + JSON.stringify({\n                    cellCase,\n                    x,\n                    y\n                }, null, 4));\n        }\n\n        line = y * width;\n\n        y0 = y - 1;\n        y2 = y + 1;\n        x0 = x - 1;\n        x2 = x + 1;\n\n        cellCase = 0;\n\n        if (x > 0)\n        {\n            if (y > 0)\n            {\n                cellCase |= (condition(data[line + x]) << 3);\n            }\n            else\n            {\n                cellCase |= (outside << 3);\n            }\n\n            if (y2 < height)\n            {\n                cellCase |= (condition(data[line + width + x]) << 0);\n            }\n            else\n            {\n                cellCase |= (outside << 0);\n            }\n        }\n        else\n        {\n            cellCase |= (outside << 3);\n            cellCase |= (outside << 0);\n        }\n\n        if (x2 < width)\n        {\n            if (y > 0)\n            {\n                cellCase |= (condition(data[line + x2]) << 2);\n            }\n            else\n            {\n                cellCase |= (outside << 2);\n            }\n            if (y2 < height)\n            {\n                cellCase |= (condition(data[line + width + x2]) << 1);\n            }\n            else\n            {\n                cellCase |= (outside << 1);\n            }\n        }\n        else\n        {\n            cellCase |= (outside << 2);\n            cellCase |= (outside << 1);\n        }\n\n    } while (x !== startX || y !== startY);\n\n    return points;\n}\n\n\nexport default function marchingSquares(data, width, height, condition, outside)\n{\n    if (data.length !== width * height)\n    {\n        throw new Error(\"array size does not match width*height: \" + JSON.stringify({array: data.length, width, height}))\n    }\n\n    const start = now();\n\n    const cells = new Uint8Array(width * height);\n    const polygons = [];\n    const ctx = {\n        width,\n        height,\n        condition,\n        outside\n    };\n\n    for (let y=0; y < height; y ++)\n    {\n        const line = y * width;\n        for (let x=0; x < width; x ++)\n        {\n            const id = polygons.length + 1;\n            const polygon = createPolygon(id, data, cells, x, y, x, y, ctx);\n            // we ignore the little diamond 4 point shapes\n            if (polygon)\n            {\n                if (polygon.length > 6)\n                {\n                    //console.log(\"Polygon #\", + id, \": length = \", polygon.length);\n                    polygons.push(polygon)\n                }\n            }\n        }\n    }\n\n    console.log(\"Marching squares done in \"  + (now() - start) + \"ms\");\n\n    return polygons;\n}\n","\nexport function perpendicularDistance(px, py, lineStartX, lineStartY, lineEndX, lineEndY) {\n\n    let dx = lineEndX - lineStartX;\n    let dy = lineEndY - lineStartY;\n\n    // Normalize\n    const mag = Math.sqrt(dx * dx + dy * dy);\n    if (mag > 0.0) {\n        dx /= mag;\n        dy /= mag;\n    }\n    const pvx = px - lineStartX;\n    const pvy = py - lineStartY;\n\n    // Get dot product (project pv onto normalized direction)\n    const pvDot = dx * pvx + dy * pvy;\n\n    // Scale line direction vector and subtract it from pv\n    const ax = pvx - pvDot * dx;\n    const ay = pvy - pvDot * dy;\n\n    return Math.sqrt(ax * ax + ay * ay);\n}\n\nfunction simplifyRec(points, start, end, epsilon, out) {\n\n    let dMax = 0;\n    let index = 0;\n\n    const startX = points[start];\n    const startY = points[start + 1];\n    const endX = points[end];\n    const endY = points[end + 1];\n\n    for(let i = start + 2; i < end; i+= 2)\n    {\n        const d = perpendicularDistance(\n            points[i], points[i+1],\n            startX, startY,\n            endX, endY\n        );\n\n        if (d > dMax)\n        {\n            index = i;\n            dMax = d;\n        }\n    }\n\n    if (dMax > epsilon)\n    {\n        simplifyRec(points, start, index, epsilon, out);\n        simplifyRec(points, index, end, epsilon, out);\n    }\n    else\n    {\n        out.push(\n            endX,\n            endY\n        )\n    }\n}\n\n\n/**\n * Performs a recursive Ramer–Douglas–Peucker simplification of the given points array.\n *\n * @param {Array<Number>} points    Array with coordinates in pairs ( [x0,y0,x1,y1, ... xN, yN] )\n * @param {Number} epsilon          Acceptable error value. The higher, the more simplified the points will be.\n * @param {boolean} [repeatFirst]   whether to repeat the first point inline in the input array\n * @return {Array<Number>} array with simplified points in pairs\n */\nexport default function simplify(points, epsilon, repeatFirst = false) {\n\n    if (repeatFirst)\n    {\n        // repeat first point for simplification\n        points.push(\n            points[0],\n            points[1],\n        );\n    }\n\n    const out = [points[0], points[1]];\n    simplifyRec(points, 0, points.length - 2, epsilon, out);\n    if (repeatFirst)\n    {\n        return out.slice(0,out.length - 2);\n    }\n    return out;\n}\n","// Delaunay code adapted from https://github.com/ironwallaby/delaunay\n\nconst EPSILON = 1.0 / 1048576.0;\n\nfunction supertriangle(vertices)\n{\n    let xmin = Number.POSITIVE_INFINITY,\n        ymin = Number.POSITIVE_INFINITY,\n        xmax = Number.NEGATIVE_INFINITY,\n        ymax = Number.NEGATIVE_INFINITY,\n        i, dx, dy, dmax, xmid, ymid;\n\n    for (i = vertices.length; i--;)\n    {\n        if (vertices[i * 2] < xmin)\n        {\n            xmin = vertices[i * 2];\n        }\n        if (vertices[i * 2] > xmax)\n        {\n            xmax = vertices[i * 2];\n        }\n        if (vertices[i * 2 + 1] < ymin)\n        {\n            ymin = vertices[i * 2 + 1];\n        }\n        if (vertices[i * 2 + 1] > ymax)\n        {\n            ymax = vertices[i * 2 + 1];\n        }\n    }\n\n    dx = xmax - xmin;\n    dy = ymax - ymin;\n    dmax = Math.max(dx, dy);\n    xmid = xmin + dx * 0.5;\n    ymid = ymin + dy * 0.5;\n\n    return [\n        xmid - 20 * dmax, ymid - dmax,\n        xmid, ymid + 20 * dmax,\n        xmid + 20 * dmax, ymid - dmax\n    ];\n}\n\n\nfunction circumcircle(vertices, i, j, k)\n{\n    const x1 = vertices[i * 2],\n        y1 = vertices[i * 2 + 1],\n        x2 = vertices[j * 2],\n        y2 = vertices[j * 2 + 1],\n        x3 = vertices[k * 2],\n        y3 = vertices[k * 2 + 1],\n        fabsy1y2 = Math.abs(y1 - y2),\n        fabsy2y3 = Math.abs(y2 - y3);\n    let xc, yc, m1, m2, mx1, mx2, my1, my2, dx, dy;\n\n    /* Check for coincident points */\n    if (fabsy1y2 < EPSILON && fabsy2y3 < EPSILON)\n    {\n        throw new Error(\"Eek! Coincident points!\");\n    }\n\n    if (fabsy1y2 < EPSILON)\n    {\n        m2 = -((x3 - x2) / (y3 - y2));\n        mx2 = (x2 + x3) / 2.0;\n        my2 = (y2 + y3) / 2.0;\n        xc = (x2 + x1) / 2.0;\n        yc = m2 * (xc - mx2) + my2;\n    }\n\n    else if (fabsy2y3 < EPSILON)\n    {\n        m1 = -((x2 - x1) / (y2 - y1));\n        mx1 = (x1 + x2) / 2.0;\n        my1 = (y1 + y2) / 2.0;\n        xc = (x3 + x2) / 2.0;\n        yc = m1 * (xc - mx1) + my1;\n    }\n\n    else\n    {\n        m1 = -((x2 - x1) / (y2 - y1));\n        m2 = -((x3 - x2) / (y3 - y2));\n        mx1 = (x1 + x2) / 2.0;\n        mx2 = (x2 + x3) / 2.0;\n        my1 = (y1 + y2) / 2.0;\n        my2 = (y2 + y3) / 2.0;\n        xc = (m1 * mx1 - m2 * mx2 + my2 - my1) / (m1 - m2);\n        yc = (fabsy1y2 > fabsy2y3) ?\n            m1 * (xc - mx1) + my1 :\n            m2 * (xc - mx2) + my2;\n    }\n\n    dx = x2 - xc;\n    dy = y2 - yc;\n    return {i: i, j: j, k: k, x: xc, y: yc, r: dx * dx + dy * dy};\n}\n\n\nfunction dedup(edges)\n{\n    let i, j, a, b, m, n;\n\n    for (j = edges.length; j;)\n    {\n        b = edges[--j];\n        a = edges[--j];\n\n        for (i = j; i;)\n        {\n            n = edges[--i];\n            m = edges[--i];\n\n            if ((a === m && b === n) || (a === n && b === m))\n            {\n                edges.splice(j, 2);\n                edges.splice(i, 2);\n                break;\n            }\n        }\n    }\n}\n\n\nconst Delaunay = {\n    triangulate: function (vertices) {\n        const n = vertices.length / 2;\n        let i, j, indices, superTri, open, closed, edges, dx, dy, a, b, c;\n\n        /* Bail if there aren't enough vertices to form any triangles. */\n        if (n < 3)\n        {\n            return [];\n        }\n\n        /* Slice out the actual vertices from the passed objects. (Duplicate the\n         * array even if we don't, though, since we need to make a supertriangle\n         * later on!) */\n        vertices = vertices.slice(0);\n\n        /* Make an array of indices into the vertex array, sorted by the\n         * vertices' x-position. Force stable sorting by comparing indices if\n         * the x-positions are equal. */\n        indices = new Array(n);\n\n        for (i = n; i--;)\n        {\n            indices[i] = i;\n        }\n\n        indices.sort(function (i, j) {\n            const diff = vertices[j * 2] - vertices[i * 2];\n            return diff !== 0 ? diff : i - j;\n        });\n\n        /* Next, find the vertices of the supertriangle (which contains all other\n         * triangles), and append them onto the end of a (copy of) the vertex\n         * array. */\n        superTri = supertriangle(vertices);\n        vertices = vertices.concat(superTri);\n\n        /* Initialize the open list (containing the supertriangle and nothing\n         * else) and the closed list (which is empty since we havn't processed\n         * any triangles yet). */\n        open = [circumcircle(vertices, n + 0, n + 1, n + 2)];\n        closed = [];\n        edges = [];\n\n        /* Incrementally add each vertex to the mesh. */\n        for (i = indices.length; i--; edges.length = 0)\n        {\n            c = indices[i];\n\n            /* For each open triangle, check to see if the current point is\n             * inside it's circumcircle. If it is, remove the triangle and add\n             * it's edges to an edge list. */\n            for (j = open.length; j--;)\n            {\n                /* If this point is to the right of this triangle's circumcircle,\n                 * then this triangle should never get checked again. Remove it\n                 * from the open list, add it to the closed list, and skip. */\n                dx = vertices[c * 2] - open[j].x;\n                if (dx > 0.0 && dx * dx > open[j].r)\n                {\n                    closed.push(open[j]);\n                    open.splice(j, 1);\n                    continue;\n                }\n\n                /* If we're outside the circumcircle, skip this triangle. */\n                dy = vertices[c * 2 + 1] - open[j].y;\n                if (dx * dx + dy * dy - open[j].r > EPSILON)\n                {\n                    continue;\n                }\n\n                /* Remove the triangle and add it's edges to the edge list. */\n                edges.push(\n                    open[j].i, open[j].j,\n                    open[j].j, open[j].k,\n                    open[j].k, open[j].i\n                );\n                open.splice(j, 1);\n            }\n\n            /* Remove any doubled edges. */\n            dedup(edges);\n\n            /* Add a new triangle for each edge. */\n            for (j = edges.length; j;)\n            {\n                b = edges[--j];\n                a = edges[--j];\n                open.push(circumcircle(vertices, a, b, c));\n            }\n        }\n\n        /* Copy any remaining open triangles to the closed list, and then\n         * remove any triangles that share a vertex with the supertriangle,\n         * building a list of triplets that represent triangles. */\n        for (i = open.length; i--;)\n        {\n            closed.push(open[i]);\n        }\n        open.length = 0;\n\n        for (i = closed.length; i--;)\n        {\n            if (closed[i].i < n && closed[i].j < n && closed[i].k < n)\n            {\n                open.push(closed[i].i, closed[i].j, closed[i].k);\n            }\n        }\n\n        // we double all offsets so that they match our linear input buffer. Positions returned are 0,2,4,... sparing\n        // the consumer of doing the multiplication\n        for (let k = 0; k < open.length; k++)\n        {\n            open[k] *= 2;\n        }\n\n        /* Yay, we're done! */\n        return open;\n    },\n\n    contains: function (vertices, offsetA, offsetB, offsetC, px, py, uvOut) {\n        /* Bounding box test first, for quick rejections. */\n        if ((px < vertices[offsetA] && px < vertices[offsetB] && px < vertices[offsetC]) ||\n            (px > vertices[offsetA] && px > vertices[offsetB] && px > vertices[offsetC]) ||\n            (py < vertices[offsetA + 1] && py < vertices[offsetB + 1] && py < vertices[offsetC + 1]) ||\n            (py > vertices[offsetA + 1] && py > vertices[offsetB + 1] && py > vertices[offsetC + 1]))\n        {\n            uvOut.isNull = true;\n        }\n        else\n        {\n\n            const a = vertices[offsetB] - vertices[offsetA],\n                b = vertices[offsetC] - vertices[offsetA],\n                c = vertices[offsetB + 1] - vertices[offsetA + 1],\n                d = vertices[offsetC + 1] - vertices[offsetA + 1],\n                i = a * d - b * c;\n\n            /* Degenerate tri. */\n            if (i === 0.0)\n            {\n                return null;\n            }\n\n            const u = (d * (px - vertices[offsetA]) - b * (py - vertices[offsetA + 1])) / i,\n                v = (a * (py - vertices[offsetA + 1]) - c * (px - vertices[offsetA])) / i;\n\n            /* If we're outside the tri, fail. */\n            if (u < 0.0 || v < 0.0 || (u + v) > 1.0)\n            {\n                uvOut.isNull = true;\n            }\n            else\n            {\n                uvOut.u = u;\n                uvOut.v = v;\n                uvOut.isNull = false;\n            }\n        }\n    }\n};\n\nexport default Delaunay\n","import SimplexNoise from \"simplex-noise\"\nimport Prando from \"prando\"\nimport now from \"performance-now\"\nimport flood from \"./flood\";\nimport marchingSquares from \"./util/marchingSquares\";\nimport simplify, { perpendicularDistance } from \"./util/simplify\";\nimport Delaunay from \"./Delaunay\";\n\n\nconst TAU = Math.PI * 2;\n\nconst N1 = 0.4;\nconst N2 = 1.4;\nconst N3 = 20;\nconst N4 = 5;\n\nconst RELATIVE_CITY_RADIUS = 0.034;\nconst MIN_CITY_RATING = 2000;\n\n\nfunction clamp(v)\n{\n    return v < -1 ? -1 : v > 1 ? 1 : v;\n}\n\n\nconst WATER_LINE = 0.05;\nconst BEACH_LINE = 0.07;\nconst WOODS_LINE = 0.09;\nconst MOUNTAIN_LINE = 0.5;\n\n// tiles\nexport const DARK = 0;\nexport const WATER = 1;\nexport const SAND = 2;\nexport const GRASS = 3;\nexport const DIRT = 4;\nexport const ROCK = 5;\nexport const WOODS = 6;\nexport const WOODS2 = 7;\nexport const RIVER = 8;\nexport const ICE = 9;\nexport const ICE2 = 10;\n\n// things\nexport const EMPTY = 1;\nexport const PLANT = 2;\nexport const PLANT_2 = 3;\nexport const PLANT_3 = 4;\nexport const DOT = 5;\nexport const _RIVER = 6;\nexport const _WOODS = 7;\nexport const BLOCKED = 8;   // non-walkable from here on\nexport const _WATER = 9;\nexport const LARGE_TREE = 10;\nexport const LARGE_TREE_2 = 11;\nexport const SMALL_TREE = 12;\nexport const SMALL_TREE_2 = 13;\nexport const SMALL_TREE_3 = 14;\nexport const BOULDER = 15;\nexport const BOULDER_2 = 16;\nexport const BOULDER_3 = 17;\nexport const HOUSE = 18;\n\n\nfunction calcWeightSum(array)\n{\n    if (!array)\n    {\n        return 0;\n    }\n\n    let sum = 0;\n    for (let i = 1; i < array.length; i += 2)\n    {\n        sum += array[i];\n    }\n    return sum;\n}\n\n\nconst tileNames = [\n    \"DARK\",\n    \"WATER\",\n    \"SAND\",\n    \"GRASS\",\n    \"DIRT\",\n    \"ROCK\",\n    \"WOODS\",\n    \"WOODS2\",\n    \"RIVER\"\n];\n\n\nconst tileVillageRating = [\n    0,  // DARK\n    0,  // WATER\n    0.5,  // SAND\n    1,  // GRASS\n    1,  // DIRT\n    -2,  // ROCK\n    1,  // WOODS\n    1,  // WOODS2\n    0,  // RIVER\n];\n\n\nfunction normalizeSpawnTable(table)\n{\n    for (let sTile in table)\n    {\n        if (table.hasOwnProperty(sTile))\n        {\n            const array = table[sTile];\n\n            if (array)\n            {\n                const sum = calcWeightSum(array);\n                for (let i = 1; i < array.length; i += 2)\n                {\n                    array[i] /= sum\n                }\n            }\n        }\n    }\n\n    return table;\n}\n\n\nconst spawnTable = normalizeSpawnTable({\n    [WATER]: [_WATER, 1],\n    [SAND]: [0, 500, BOULDER, 1, BOULDER_3, 1, BOULDER_2, 1],\n    [GRASS]: [\n        0,\n        1000,\n        LARGE_TREE,\n        2,\n        LARGE_TREE_2,\n        2,\n        SMALL_TREE,\n        3,\n        SMALL_TREE_3,\n        3,\n        BOULDER,\n        1,\n        BOULDER_3,\n        1,\n        BOULDER_2,\n        2\n    ],\n    [DIRT]: [\n        0,\n        1000,\n        LARGE_TREE,\n        2,\n        LARGE_TREE_2,\n        2,\n        SMALL_TREE,\n        3,\n        SMALL_TREE_3,\n        3,\n        BOULDER,\n        1,\n        BOULDER_3,\n        1,\n        BOULDER_2,\n        2\n    ],\n    [ROCK]: [BLOCKED, 4, BOULDER, 1, BOULDER_3, 1, BOULDER_2, 1],\n    [WOODS]: [\n        _WOODS,\n        150,\n        LARGE_TREE,\n        2,\n        LARGE_TREE_2,\n        2,\n        SMALL_TREE,\n        5,\n        SMALL_TREE_2,\n        5,\n        SMALL_TREE_3,\n        5,\n        PLANT,\n        1,\n        PLANT_2,\n        1,\n        PLANT_3,\n        1,\n        BOULDER,\n        1,\n        BOULDER_3,\n        1,\n        BOULDER_2,\n        2\n    ],\n    [WOODS2]: [\n        _WOODS,\n        40,\n        LARGE_TREE,\n        2,\n        LARGE_TREE_2,\n        2,\n        SMALL_TREE,\n        5,\n        SMALL_TREE_2,\n        5,\n        SMALL_TREE_3,\n        5,\n        PLANT,\n        1,\n        PLANT_2,\n        1,\n        PLANT_3,\n        1,\n        BOULDER,\n        1,\n        BOULDER_3,\n        1,\n        BOULDER_2,\n        2\n    ],\n    [RIVER]: [_RIVER, 1]\n});\n\nfunction spawn(map, spawns)\n{\n    if (spawns.length < 4)\n    {\n        return spawns[0];\n    }\n\n    let value = map.random.next();\n    let pos = 1;\n    do\n    {\n        value -= spawns[pos];\n        pos += 2\n    } while (value > 0 && pos < spawns.length);\n\n    return spawns[pos - 3];\n}\n\n\nfunction spawnForBlock(map, mapOffset, tile)\n{\n    const {things, size, sizeMask} = map;\n\n    if (things[mapOffset] !== 0)\n    {\n        //console.log(\"Skip spawning on \", things[mapOffset]);\n        return;\n    }\n\n    const spawns = spawnTable[tile];\n    if (spawns)\n    {\n        const thing = spawn(map, spawns);\n        if (thing)\n        {\n            //console.log(\"THING\", thing);\n\n            if (thing === LARGE_TREE || thing === LARGE_TREE_2)\n            {\n\n                const prev3Offset = (mapOffset - 3) & sizeMask;\n                const prev2Offset = (mapOffset - 2) & sizeMask;\n                const prevOffset = (mapOffset - 1) & sizeMask;\n                const nextOffset = (mapOffset + 1) & sizeMask;\n                const next2Offset = (mapOffset + 2) & sizeMask;\n                const next3Offset = (mapOffset + 3) & sizeMask;\n\n                if (\n                    things[prev3Offset] !== BLOCKED &&\n                    things[prev2Offset] !== BLOCKED &&\n                    things[prevOffset] !== BLOCKED\n                )\n                {\n\n                    things[mapOffset] = thing;\n                    things[nextOffset] = BLOCKED;\n                    things[next2Offset] = BLOCKED;\n                    things[next3Offset] = BLOCKED;\n\n                    //console.log(\"Block for large tree\", mapOffset)\n                }\n            }\n            else if (thing === BOULDER || thing === BOULDER_3)\n            {\n                const prevOffset = (mapOffset - 1) & sizeMask;\n                const nextOffset = (mapOffset + 1) & sizeMask;\n\n                //baseTile === ROCK && console.log(\"isLargeBoulder\", things[prevOffset], things[mapOffset], things[nextOffset])\n\n                if (\n                    things[prevOffset] !== BLOCKED\n                )\n                {\n\n                    things[mapOffset] = thing;\n                    things[nextOffset] = BLOCKED;\n                    //console.log(\"Block for large boulder\", mapOffset)\n                }\n            }\n            else\n            {\n                things[mapOffset] = thing;\n            }\n        }\n    }\n}\n\n\nconst nCoords = [0,0]\nfunction determineTile(map, x, y, climate)\n{\n    const coords = map.heightCoords(x, y);\n    const n = map.heightFn(x, y, coords, nCoords);\n\n    climate = clamp(climate - n * 0.96 + nCoords[1] * 0.2);\n\n\n    let result;\n    if (n < WATER_LINE)\n    {\n        result = WATER;\n    }\n    else if (n < BEACH_LINE)\n    {\n        result = SAND;\n    }\n    else if (n < MOUNTAIN_LINE)\n    {\n        const {nx, ny, nz, nw} = coords;\n\n        const n3 = n > WOODS_LINE ? map.noise4D(nx * N4, nw * N4, ny * N4, nz * N4) : 1;\n        const n4 = map.noise4D(nx * N3, nw * N3, ny * N3, nz * N3);\n        if (n3 < 0)\n        {\n            if (n4 < 0)\n            {\n                result = WOODS;\n            }\n            else\n            {\n                result = WOODS2;\n            }\n\n        }\n        else\n        {\n            if (n4 < 0)\n            {\n                result = GRASS;\n            }\n            else\n            {\n                result = DIRT;\n            }\n        }\n    }\n    else\n    {\n        result = ROCK;\n    }\n\n    if (climate < 0.4)\n    {\n        if (result === WATER)\n        {\n            return ICE2;\n        }\n        else if (result === WOODS2|| result === GRASS || result === DIRT || result === SAND )\n        {\n            return ICE;\n        }\n\n        if (result === WOODS )\n        {\n            return ROCK;\n        }\n    }\n    else if (climate > 0.95)\n    {\n        if (result === WOODS || result === WOODS2 || result === GRASS || result === DIRT )\n        {\n            return SAND;\n        }\n    }\n\n    return result\n}\n\n\nfunction createBase(size, seed, updateProgress, percent)\n{\n    const map = new WorldMap(size, seed);\n\n    const {tiles} = map;\n\n    let mapOffset = 0;\n\n    const report = (size / 20)|0\n\n\n    const climateStep = TAU / 2 / size;\n    let ca = 0;\n    for (let y = 0; y < size; y++)\n    {\n        const climate = Math.sin(ca);\n\n        ca += climateStep;\n\n        for (let x = 0; x < size; x++)\n        {\n            const tile = determineTile(map, x, y, climate);\n            tiles[mapOffset] = tile;\n            spawnForBlock(map, mapOffset, tile);\n\n            mapOffset++;\n        }\n\n        if (updateProgress && (y % report) === 0)\n        {\n            updateProgress(percent * y / size);\n        }\n    }\n    return map;\n}\n\n\nfunction randomProbes(map)\n{\n    const probes = [];\n\n    const {size} = map;\n\n    const probeCount = size * size / 1000;\n\n    //console.log(\"Probe count =\", probeCount);\n\n    for (let i = 0; i < probeCount; i++)\n    {\n        const x = (map.random.next() * size) | 0;\n        const y = (map.random.next() * size) | 0;\n\n        const value = map.heightFn(x, y);\n\n        if (value > WATER_LINE)\n        {\n            probes.push({\n                x,\n                y,\n                value,\n                points: [],\n                tile: 0\n            })\n        }\n    }\n    return probes;\n}\n\n\nconst directions = [\n    0, -1,\n    -1, 0,\n    1, 0,\n    0, 1\n];\n\n\nfunction climbUp(map, probe)\n{\n    let currentHigh = probe.value;\n    let currentX = probe.x;\n    let currentY = probe.y;\n\n    const {size} = map;\n\n    let improved = false;\n    for (let i = 0; i < directions.length; i += 2)\n    {\n        const x = probe.x + directions[i];\n        const y = probe.y + directions[i + 1];\n\n        if (x > 0 && y > 0 && x < size && y < size)\n        {\n            const value = map.heightFn(x, y);\n            if (value > currentHigh)\n            {\n                currentHigh = value;\n                currentX = x;\n                currentY = y;\n                improved = true;\n            }\n        }\n    }\n\n    if (!improved)\n    {\n        return false;\n    }\n    else\n    {\n        return {\n            x: currentX,\n            y: currentY,\n            value: currentHigh,\n            points: []\n        };\n    }\n}\n\n\nfunction removeDuplicates(probes)\n{\n    const length = probes.length;\n\n    const uniqueProbes = [];\n\n    for (let i = 0; i < length; i++)\n    {\n        const probe = probes[i];\n        let unique = true;\n        for (let j = length - 1; j > i; j--)\n        {\n            const other = probes[j];\n            if (probe.x === other.x && probe.y === other.y)\n            {\n                unique = false;\n                break;\n            }\n        }\n\n        if (unique)\n        {\n            uniqueProbes.push(probe);\n        }\n    }\n\n    return uniqueProbes;\n}\n\n\nfunction jitter(map, filtered, amount = 8)\n{\n    const twice = amount * 2;\n\n    const multis = [];\n    for (let i = 0; i < filtered.length; i++)\n    {\n        const probe = filtered[i];\n        const xOff = map.random.nextInt(-amount, amount);\n        const yOff = map.random.nextInt(-amount, amount);\n        probe.x = probe.x + xOff;\n        probe.y = probe.y + yOff;\n\n        const v = map.heightFn(probe.x, probe.y);\n\n        if (v > MOUNTAIN_LINE && map.random.next() < 0.6)\n        {\n            multis.push(\n                {\n                    ...probe,\n                    points: [],\n                    x: (probe.x - amount - yOff) | 0,\n                    y: (probe.y - amount + xOff) | 0\n                }\n            );\n        }\n    }\n\n    return filtered.concat(multis);\n}\n\n\nfunction createSprings(map)\n{\n    const probes = randomProbes(map);\n\n    //console.log(probes.length, \"random probes\");\n\n    const {size} = map;\n\n    const length = probes.length;\n    let walkingStart = 0, i = 0;\n    for (i = 0; i < size / 2 && walkingStart < length; i++)\n    {\n        //console.log(\"Walking \" + (length - walkingStart))\n        for (let j = walkingStart; j < length; j++)\n        {\n            const probe = probes[j];\n            const improved = climbUp(map, probe);\n            if (improved)\n            {\n                probes[j] = improved;\n            }\n            else\n            {\n                // swap current with first walker\n                const firstWalker = probes[walkingStart];\n                probes[walkingStart] = probes[j];\n                probes[j] = firstWalker;\n                // increase walking start\n                walkingStart++;\n            }\n        }\n\n        //drawSprings(probes, imageData, false);\n    }\n\n    const filtered = removeDuplicates(probes);\n\n    //console.log(filtered.length, \"springs\");\n    //console.log(\"Stopped climbing after \", i, \" iterations: \" + filtered.length + \" springs\");\n\n    return jitter(map, filtered);\n}\n\n\nfunction flow(map, probe)\n{\n    let currentLow = Infinity;\n    let currentX = probe.x;\n    let currentY = probe.y;\n    let currentTile = -1;\n    let currentDirection = -1;\n\n    let improved = false;\n\n    const {size} = map;\n\n    for (let i = 0; i < directions.length; i += 2)\n    {\n        const x = probe.x + directions[i];\n        const y = probe.y + directions[i + 1];\n\n        if (x > 0 && y > 0 && x < size && y < size)\n        {\n            let tile = map.read(x, y);\n            if (tile !== RIVER)\n            {\n                if (tile === ROCK)\n                {\n                    const {nx, ny, nz, nw} = map.heightCoords(x, y);\n                    const n3 = map.noise4D(nx * N3, nw * N3, ny * N3, nz * N3);\n                    if (n3 < 0)\n                    {\n                        tile = GRASS;\n                    }\n                    else\n                    {\n                        tile = DIRT;\n                    }\n                }\n\n                const value = map.heightFn(x, y) - (tile !== SAND && tile === probe.tile ? 0.001 : 0);\n                if (value < currentLow)\n                {\n                    currentLow = value;\n                    currentX = x;\n                    currentY = y;\n                    currentTile = tile;\n                    currentDirection = i;\n                    improved = true;\n                }\n            }\n        }\n    }\n\n    if (!improved)\n    {\n        const dir = map.random.nextInt(0, 3) * 2;\n        probe.x += directions[dir];\n        probe.y += directions[dir + 1];\n        probe.tile = map.read(probe.x, probe.y);\n    }\n    else\n    {\n        const n = map.random.next();\n        if (n < 0.25)\n        {\n            const dir = ((currentDirection / 2 + (n < 0.125 ? -1 : 1)) & 3) * 2;\n\n            probe.x += directions[dir];\n            probe.y += directions[dir + 1];\n\n            probe.points.push(probe.x, probe.y);\n\n            probe.x += directions[dir];\n            probe.y += directions[dir + 1];\n            probe.value = 1;\n            probe.tile = map.read(probe.x, probe.y);\n        }\n        else\n        {\n            probe.x = currentX;\n            probe.y = currentY;\n            probe.value = currentLow;\n            probe.tile = currentTile;\n\n        }\n    }\n}\n\n\nfunction findMean(springs)\n{\n    const last = springs.length - 1;\n    const mid = last / 2;\n    if (mid % 1)\n    {\n        return springs[(mid | 0)].points.length + springs[(mid | 0) + 1].points.length / 2;\n    }\n    else\n    {\n        return springs[(mid | 0)].points.length;\n    }\n}\n\n\n/**\n * Filters only the springs that are at least twice the spring mean length.\n *\n * @param springs   springs\n * @return {*}\n */\nfunction findLongRivers(map, springs)\n{\n    // we are roughly sorted, but not perfectly\n    springs.sort((a, b) => a.points.length - b.points.length);\n\n    const last = springs.length - 1;\n\n    const mean = findMean(springs);\n    const longRivers = springs.filter(s => s.points.length > mean * 2);\n\n    //console.log(\"Min spring length\", springs[0].points.length);\n    //console.log(\"Mean spring length\", mean);\n    //console.log(\"Max spring length\", springs[last].points.length);\n\n    //console.log(longRivers);\n\n    return longRivers\n\n}\n\n\nfunction getRiverWidth(index)\n{\n    return Math.min(8, index * 0.008) | 0;\n}\n\n\nfunction drawRivers(map)\n{\n    const springs = createSprings(map);\n\n    const {size} = map;\n\n    const length = springs.length;\n    let flowingStart = 0, i = 0;\n    for (i = 0; i < size && flowingStart < length; i++)\n    {\n        //console.log(\"Flowing \" + (length - flowingStart))\n        for (let j = flowingStart; j < length; j++)\n        {\n            const probe = springs[j];\n\n            const {x, y} = probe;\n            probe.points.push(x, y);\n\n            const currentTile = map.read(probe.x, probe.y);\n            if (currentTile === WATER || currentTile === ICE || currentTile === ICE2)\n            {\n                // swap current with first flower\n                const firstFlower = springs[flowingStart];\n                springs[flowingStart] = springs[j];\n                springs[j] = firstFlower;\n                // increase walking start\n                flowingStart++;\n                continue;\n            }\n            flow(map, probe);\n\n        }\n\n        //drawSprings(springs, imageData, false);\n    }\n    //console.log(\"Stopped flowing after \", i, \" iterations\");\n\n    for (let i = 0; i < springs.length; i++)\n    {\n        const {points} = springs[i];\n\n        for (let j = 0; j < points.length; j += 2)\n        {\n            const width = getRiverWidth(j);\n            flood(map, points[j], points[j + 1], width);\n        }\n    }\n\n    return springs;\n}\n\n\nfunction findNonRiverTile(map, x, y)\n{\n    let minDistance = Infinity;\n    let px, py, mdx, mdy;\n    for (let i = 0; i < directions.length; i += 2)\n    {\n        const dx = directions[i];\n        const dy = directions[i + 1];\n\n        // if (map.read(x, y) !== RIVER)\n        // {\n        //     throw new Error(\"coord not in river\")\n        // }\n\n        let distance = 1;\n        let currX = x + dx;\n        let currY = y + dy;\n        while (map.read(currX, currY) === RIVER)\n        {\n            distance++;\n            currX += dx;\n            currY += dy;\n        }\n\n        if (distance < minDistance)\n        {\n            minDistance = distance;\n            px = currX;\n            py = currY;\n            mdx = dx;\n            mdy = dy;\n\n        }\n    }\n\n    //console.log(\"findNonRiverTile: min = \", minDistance, \", direction = \", mdx, mdy)\n\n    return {\n        px,\n        py\n    }\n}\n\n\nfunction planCities(map, rivers)\n{\n    const longRivers = findLongRivers(map, rivers)\n        .filter(\n            (spring, idx) => {\n                const {points} = spring;\n\n                const len = points.length;\n                const radius = (len * RELATIVE_CITY_RADIUS) | 0;\n\n                const mouthX = points[len - 2];\n                const mouthY = points[len - 1];\n\n                let i;\n                for (i = len - 4; i > 0; i -= 2)\n                {\n                    let x = points[i] - mouthX;\n                    let y = points[i + 1] - mouthY;\n\n                    const dist = Math.sqrt(x * x + y * y);\n\n                    if (dist > radius)\n                    {\n                        //console.log(\"reached radius\");\n                        break;\n                    }\n                }\n\n                const {px, py} = findNonRiverTile(map, points[i], points[i + 1]);\n\n                const radiusSquared = radius * radius;\n                let sum = 0;\n                for (let y = -radius; y < radius; y++)\n                {\n                    const xDelta = (Math.sqrt(radiusSquared - y * y)) | 0;\n\n                    for (let x = -xDelta; x < xDelta; x++)\n                    {\n                        sum += tileVillageRating[map.read(px + x, py + y)];\n                    }\n                }\n\n                spring.centerX = (px & map.sizeMask);\n                spring.centerY = (py & map.sizeMask);\n                spring.radius = radius;\n\n                const isLong = sum > MIN_CITY_RATING;\n\n                //console.log(\"RATING\" + idx, sum);\n\n                return isLong;\n\n            });\n\n    for (let j = 0; j < longRivers.length; j++)\n    {\n        const {centerX, centerY, radius} = longRivers[j];\n\n        const radiusSquared = radius * radius;\n        for (let y = -radius; y <= radius; y++)\n        {\n            const xDelta = Math.round(Math.sqrt(radiusSquared - y * y));\n\n            map.putThing(centerX + xDelta, centerY + y, DOT);\n            map.putThing(centerX - xDelta, centerY + y, DOT);\n        }\n\n        //map.write(centerX, centerY, MARKER)\n    }\n\n    return longRivers;\n}\n\n\nfunction flatten(arrayOfArrays)\n{\n    let out = [];\n    for (let i = 0; i < arrayOfArrays.length; i++)\n    {\n        out = out.concat(arrayOfArrays[i]);\n    }\n    return out;\n}\n\n/**\n * Returns true if the given point x,y is inside the potentially convex polygon given as array of points.\n *\n * @param {Number} x    x-coordinate of point\n * @param {Number} y    y-coordinate of point\n * @param {Array<Number>} poly      Array of polygon points in pairs ( [x0,y0,x1,y1,...,xN,yN] )\n * @return {boolean} true if point is in polygon\n */\nexport function isPointInPolygon(x, y, poly)\n{\n    const { length } = poly;\n\n    let prevX = poly[ length - 2];\n    let prevY = poly[ length - 1];\n    let inPolygon = false;\n    for (let i = 0; i < length; i += 2)\n    {\n        const currX = poly[i];\n        const currY = poly[i + 1];\n        if (\n            currY > y !== prevY > y &&\n            x < currX + (prevX - currX) * (y - currY) / (prevY - currY)\n        )\n        {\n            inPolygon = !inPolygon\n        }\n        prevX = currX;\n        prevY = currY;\n    }\n    return inPolygon;\n}\n\n\n/**\n * Filters the given triangles so only triangles where the majority of rasterized map point are walkable remain.\n *\n * @param {WorldMap} map    map\n * @param {Array<number>} vertices\n * @param {Array<number>} triangles\n * @return {Array<number>} walkable triangles\n */\nfunction filterWalkable(map, vertices, triangles)\n{\n    return triangles;\n}\n\n\nconst SIMPLIFICATION_EPSILON = 2.5;\n\n\nfunction planRoads(map, cities)\n{\n    const polygons = marchingSquares(map.things, map.size, map.size, t => t >= BLOCKED, true);\n\n    console.log(\"MARCHING-CUBE: polygons = \", polygons.length, \", vertexes = \", polygons.reduce((count, array) => count + array.length, 0));\n\n    const simplified = polygons.map(p => simplify(p, SIMPLIFICATION_EPSILON, true)).filter(p => p.length > 6);\n\n    console.log(\"SIMPLIFIED: polygons = \", simplified.length, \", vertexes = \", simplified.reduce((count, array) => count + array.length, 0));\n\n    const vertices = flatten(simplified);\n    const triangles = Delaunay.triangulate(vertices);\n\n    console.log(\"DELAUNAY: triangles\", triangles.length / 3, \", vertexes = \", triangles.length);\n\n    const walkable = filterWalkable(map, vertices, triangles);\n\n    console.log(\"WALKABLE: triangles\", walkable.length / 3, \", vertexes = \", walkable.length);\n\n    map.vertices = vertices;\n    map.polygons = simplified;\n    map.triangles = walkable;\n}\n\n\nexport default class WorldMap {\n    constructor(size = 800, seed, tiles, things)\n    {\n        const lg = Math.log(size) / Math.log(2);\n        if ((lg % 1) !== 0)\n        {\n            throw new Error(\"Size must be power of two: \" + size);\n        }\n\n        //console.log(\"New map \" + size + \" x \" + size + \", seed = \" + seed);\n\n        this.random = new Prando(seed);\n        this.noise = new SimplexNoise(() => this.random.next());\n        this.size = size;\n\n        this.sizeMask = size - 1;\n        this.fineMask = (size << 4) - 1;\n\n        this.factor = 1 / size;\n        this.tiles = tiles || new Uint8Array(size * size);\n        this.things = things || new Uint8Array(size * size);\n    }\n\n\n    read(x, y)\n    {\n        return this.tiles[(y & this.sizeMask) * this.size + (x & this.sizeMask)];\n    }\n\n\n    getThing(x, y)\n    {\n        return this.things[(y & this.sizeMask) * this.size + (x & this.sizeMask)];\n    }\n\n\n    write(x, y, tile)\n    {\n        this.tiles[(y & this.sizeMask) * this.size + (x & this.sizeMask)] = tile;\n    }\n\n\n    putThing(x, y, thing)\n    {\n        this.things[(y & this.sizeMask) * this.size + (x & this.sizeMask)] = thing;\n    }\n\n\n    /**\n     * Returns the terrain height at the given tile coordinates\n     *\n     * @param {Number} x            tile x-coordinate\n     * @param {Number} y            tile y-coordinate\n     * @param {Object} [coords]     predetermined 4D coordinates\n     * @param {number} coords.nx    predetermined 4D x-coordinate\n     * @param {number} coords.ny    predetermined 4D y-coordinate\n     * @param {number} coords.nz    predetermined 4D z-coordinate\n     * @param {number} coords.nw    predetermined 4D w-coordinate\n     * @param nCoords               array receiving n0 and n1\n     *\n     * @return {number} height between -1 and 1 inclusive\n     */\n    heightFn(x, y, coords, nCoords = null)\n    {\n        const s = x * this.factor;\n        const t = y * this.factor;\n\n        let nx;\n        let ny;\n        let nz;\n        let nw;\n        if (coords)\n        {\n            nx = coords.nx;\n            ny = coords.ny;\n            nz = coords.nz;\n            nw = coords.nw;\n        }\n        else\n        {\n            nx = Math.cos(s * TAU);\n            ny = Math.cos(t * TAU);\n            nz = Math.sin(s * TAU);\n            nw = Math.sin(t * TAU);\n        }\n\n        const n0 = this.noise4D(nx * N1, ny * N1, nz * N1, nw * N1);\n        const n1 = this.noise4D(nx * N2, nw * N2, ny * N2, nz * N2);\n\n        if (nCoords)\n        {\n            nCoords[0] = n0;\n            nCoords[1] = n1;\n        }\n\n        return clamp(n0 < 0 ? -n0 * n0 : n0 * n0) + n1 * 0.3;\n    }\n\n\n    /**\n     * Returns the 4D coordinates for the given tile coordinates\n     *\n     * @param {Number} x    tile x-coordinate\n     * @param {Number} y    tile y-coordinate\n     * @return {{nw: number, nx: number, ny: number, nz: number}} 4D coordinates of 2 circles in 4D space\n     */\n    heightCoords(x, y)\n    {\n\n        const s = x * this.factor;\n        const t = y * this.factor;\n\n        const nx = Math.cos(s * TAU);\n        const ny = Math.cos(t * TAU);\n        const nz = Math.sin(s * TAU);\n        const nw = Math.sin(t * TAU);\n\n        return {\n            nx,\n            ny,\n            nz,\n            nw\n        };\n    }\n\n\n    render(ctx)\n    {\n        const {size} = this;\n\n        const imageData = ctx.createImageData(size, size);\n\n        const data = imageData.data;\n\n        let tileOffset = 0;\n        let dataOffset = 0;\n        for (let y = 0; y < size; y++)\n        {\n            for (let x = 0; x < size; x++)\n            {\n                const tile = this.tiles[tileOffset++];\n\n                switch (tile)\n                {\n                    case RIVER:\n                        data[dataOffset++] = 128;\n                        data[dataOffset++] = 128;\n                        data[dataOffset++] = 255;\n                        data[dataOffset++] = 255;\n                        break;\n                    case WATER:\n                        data[dataOffset++] = 0;\n                        data[dataOffset++] = 32;\n                        data[dataOffset++] = 128;\n                        data[dataOffset++] = 255;\n                        break;\n                    case SAND:\n                        data[dataOffset++] = 192;\n                        data[dataOffset++] = 160;\n                        data[dataOffset++] = 0;\n                        data[dataOffset++] = 255;\n                        break;\n                    case GRASS:\n                        data[dataOffset++] = 0;\n                        data[dataOffset++] = 128;\n                        data[dataOffset++] = 0;\n                        data[dataOffset++] = 255;\n                        break;\n                    case WOODS:\n                        data[dataOffset++] = 0;\n                        data[dataOffset++] = 108;\n                        data[dataOffset++] = 16;\n                        data[dataOffset++] = 255;\n                        break;\n                    case WOODS2:\n                        data[dataOffset++] = 0;\n                        data[dataOffset++] = 64;\n                        data[dataOffset++] = 32;\n                        data[dataOffset++] = 255;\n                        break;\n                    case DIRT:\n                        data[dataOffset++] = 64;\n                        data[dataOffset++] = 64;\n                        data[dataOffset++] = 0;\n                        data[dataOffset++] = 255;\n                        break;\n                    case ROCK:\n                        data[dataOffset++] = 100;\n                        data[dataOffset++] = 100;\n                        data[dataOffset++] = 100;\n                        data[dataOffset++] = 255;\n                        break;\n                    case ICE:\n                        data[dataOffset++] = 248;\n                        data[dataOffset++] = 248;\n                        data[dataOffset++] = 255;\n                        data[dataOffset++] = 255;\n                        break;\n                    case ICE2:\n                        data[dataOffset++] = 220;\n                        data[dataOffset++] = 220;\n                        data[dataOffset++] = 255;\n                        data[dataOffset++] = 255;\n                        break;\n                }\n            }\n        }\n\n        return imageData;\n\n    }\n\n\n    noise4D(x, y, z, w)\n    {\n        return this.noise.noise4D(x, y, z, w);\n\n    }\n\n    serialize()\n    {\n        return {\n            \"_\": \"Map serialization\",\n\n            size: this.size,\n            seed: this.random._seed,\n            tiles: this.tiles,\n            things: this.things\n        }\n    }\n\n    static deserialize(obj)\n    {\n        //console.log(\"DESERIALIZE\", obj);\n        const {size, seed, things, tiles} = obj;\n\n\n        return new WorldMap(\n            size,\n            seed,\n            tiles,\n            things\n        );\n    }\n\n    static generate(size, seed = new Date().getTime(), updateProgress)\n    {\n\n        const start = now();\n        const map = createBase(size, seed, updateProgress, 0.75);\n        const afterBase = now();\n        const rivers = drawRivers(map);\n        const afterRivers = now();\n        updateProgress && updateProgress(0.87);\n        const cities = planCities(map, rivers);\n        const afterCities = now();\n\n        planRoads(map, cities);\n        updateProgress && updateProgress(1);\n\n        const end = now();\n        console.log(`Base in ${afterBase - start}ms`);\n        console.log(`Rivers in ${afterRivers - start}ms`);\n        console.log(`Cities in ${afterCities - start}ms`);\n        console.log(`Roads in ${end - start}ms`);\n\n        //console.log({ thingStats : map.things.reduce((a,b) =>(a[b] = a[b] === undefined ? 1: a[b] + 1,a), [])});\n\n        return map;\n    };\n\n}\n","import WorldMap from \"../WorldMap\";\n\nonmessage = function (ev) {\n\n    const {type, ticket} = ev.data;\n\n    if (type === \"GENERATE\")\n    {\n        const { seed } = ev.data;\n\n        console.log(\"Generating world '\" + seed + \"'\");\n\n        const map = WorldMap.generate(\n            2048,\n            seed,\n\n            percent => postMessage({\n                type: \"PROGRESS\",\n                percent,\n                ticket\n            }));\n\n        postMessage({\n            type: \"MAPRESULT\",\n            ticket,\n            payload: map.serialize()\n        });\n    }\n    else\n    {\n        postMessage({\n            type: \"ERROR_UNHANDLED\",\n            ticket\n        })\n    }\n\n};\n\n\n\n\n"],"sourceRoot":""}